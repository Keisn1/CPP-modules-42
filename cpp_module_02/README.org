#+title: Readme
#+startup: latexpreview

* fixed-point numbers
- balance between performance, accuracy, range and precision
- used in computer graphics, sound processing, scientific programming etc.

** Decimal-example
  - $2 * 101 + 6 * 100 + 5 * 10 - 1 = 1269$

** Binary example
|  25 | 24 | 23 | 22 | 21 | 20 | 2-1 | 2-2 | 2-3 |
| ... |  1 |  1 |  0 |  1 |  0 |   1 |   0 | ... |

$= 1 * 2^4 + 1 * 2^3 + 0 * 2^2 + 1 * 2^1 + 0* 2^0 + 1 * 2^{-1}$
$= 16 + 8 + 2 + 0.5$
$= 26.5$
** the algorithm
- raw_bits .... width of the number representation
- frac_bits .... nbr of bits used for fractional digits
- | 0 | 0 | 0 | 1 | 0 | 1 | 1 | 0 |
  - represents a real number: $00010.1100$
    $= 1 * 2^1 + 1 * 2^{-1} + 1 * 2^{-2}$
    $= 2 + 0.5 + 0.25$
    $= 2.75$
*** 2's complement
- how to represent -2.75
  1. get fixed-point of:
     $2.75 = 010.1100$

  2. complementing (mirroring the number at the pivot)
     $101.00 = -4 + 1 = 3$
  3. add 1:
     $101.01 = -4 + 1 + 0.25 = -2.75$

* Floating numbers repres
https://www.cprogramming.com/tutorial/floating_point/understanding_floating_point_representation.html

32-bit representation
| part     |                         | len |   |   |
|----------+-------------------------+-----+---+---|
| sign     | s                       |   1 |   |   |
| exponent | eeeeeeee                |   8 |   |   |
| mantisse | mmmmmmmmmmmmmmmmmmmmmmm |  23 |   |   |

$val = 2^x * M$
- Example
  - \(val = 2^-2 * 333 = 1/4 * 333 = 83.25\)
- ambigious definition
  - \(2 * 10^{-1} = 0.2 * 10^{0} = 0.02 * 10^{1}\)
